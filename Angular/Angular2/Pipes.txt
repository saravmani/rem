used to do any formating for the input

{{propertyName|uppercase}}
{{propertyName|date:"dd/mm/yyyy"}} //pipes with input parameter
{{propertyName|slice:2}} //cutting first two letters


pure and impure pipes
------------------------------------
pure piples will not every time when relavent object's values get modified.
but it will run if object reference itself gets modified

@Pipe({
  name: 'myPipe',
  pure:false
})
** Here pure property is by default ture. 
if it is true then if assigned value gets modified then it wont reflect. (pipe will not rerun on change)
(but for premitive data types it will change).

But if we set false, this it will give performance hit

async pipe
----------------
using this pipe we can able to listen observable or promise, and once got result
we can display.
this one we can use to display any simple data fetch from ajax and update template
Ex:
	//inside component create one promise
export class componentclass
{
asyncValue = new Promise((resolve,reject)=>{
setTimeout(()=>resolve('some data'),2000)
});
}

//inside template
<div>{{asyncValue|async}}</div>




The Async Pipe
Angular implements an unusual impure pipe, AsyncPipe—you can use it with the “async” name in
component templates—, which works with a Promise or Observable input. This pipe automatically
subscribes to the input stream, returns the emitted values, and does the necessary cleanup on the
completion of the data stream.

{{ getMouseMessage(mousepad.mouseEvents$ | async) }}


export class AppComponent {
@ViewChild(MousepadComponent) mousepad: MousepadComponent;
getMouseMessage(m: MouseEvent) {
return m ? `(${m.clientX}, ${m.clientY})` : '(?, ?)';
}
}