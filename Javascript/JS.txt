Traditional class-based languages often reserve the word this to reference the current
(runtime) instance of the class. In Javascript this refers to the calling context and therefore
can change to be something other than the object.

transpilers
 	used to transpile ecma 6 to 5 or different versions.
Typescript is a transpiler. which is used in ng2


In javascript type didection is problematic. 
typeof instanceof will not be proper on all the places
solution for this is toStrincg()
“[object NativeConstructorName]”.//NOT IN IE
alert(Object.prototype.toString.call(value)); //”[object Array]”
//“[object Function]”;//“[object RegExp]”;



this will not work with nonnative constructors.


with statement
---------------------
The with statement sets the scope of the code within a particular object.

var qs = location.search.substring(1);
var hostName = location.hostname;
var url = location.href;

in above code location object used many times.
we can rewrite like below
with(location){
var qs = search.substring(1);
var hostName = hostname;
var url = href;
}


10-oct-2016
------------------
var obj = document.querySelector("#controlID")
obj.setAttribute('style', 'display:none;');


25-Sep- 2016
-------------------
Array
----------
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var tOpObject =  fruits.shift();// this emthod will remove the  first item of an array and returns in calling funciton



24-Sep-2016

function Exercise(args) {
this.name = args.name;
this.related = {};//Just we are creating one object and assigning the properties
this.related.videos = args.videos;

}

Javascript strict mode
------------------------
"use strict";
 "use strict" directive is new in JavaScript 1.8.5 (ECMAScript version 5).
Strict mode is supported in:
IE from version 10. Firefox from version 4.
Chrome from version 13. Safari from version 5.1.
Opera from version 12.

Strict mode example:
"use strict";
myFunction();

function myFunction() {
    y = 3.14;   // This will also cause an error (y is not defined)
}

<script>
x = 3.14;        // This will not cause an error.
myFunction();

function myFunction() {
    "use strict";
    y = 3.14;    // This will cause an error (y is not defined).
}
</script>

in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error
"use strict";
var x = 3.14;
delete x;// This will cause an error

"use strict";
function x(p1, p2) {};
delete x;// This will cause an error

"use strict";
var x = 010;             // This will cause an error


Future reserved keywords are not allowed in strict mode. These are:

implements
interface
let
package
private
protected
public
static
yield


The "use strict" directive is only recognized at the beginning of a script or a function.




In javascript comparision having two types.
Regular comparison (a==b)
and strict comparison (a===b).
strict comparison will consider data type, but regualar will not
Ex:
(2 == '2')// true
(2 === '2')//false --Strict comparison
('2' === '2')//true --Strict comparison


Note: switch statements use strict comparison:

Note: breaking a statement in the middle of a string will not work
var x = "Hello
World!";//This will throw error -- syntax error exception


//Below function will return undefined. bcs javascript will end with return statement. so it will not execute next statuement. so Never break a return statement.



function myFunction(a) {
    var power = 10;
    return
    a * power;
}



Arrays with named indexes are called associative arrays (or hashes).

Normally in javascript Arrays will not supprt named index.
But if we try to give named index ,JavaScript will redefine the array to a standard object.
So it will not act as array

ar person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
var x = person.length;         // person.length will return 0
var y = person[0];             // person[0] will return undefined


With JavaScript, null is for objects, undefined is for variables, properties, and methods.

To be null, an object has to be defined, otherwise it will be undefined.
if (myObj !== null && typeof myObj !== "undefined") {} // this will through error

if (typeof myObj !== "undefined" && myObj !== null) {}// this is correct


JavaScript does not create a new scope for each code block.
for (var i = 0; i < 10; i++) {
    // some code
}
return i;// Here i will return value.. but check the scope, this will not work in C#






Basic object orianted program in JS
----------------------------------------
var ClsStudent = function()
{
this.StudentName="SaravMani";
this.GetStudentInfo= function()
{
return this.studentName;
}

}



//Note: Here this.Function name will attach the function to the object
//How to Call?
var obj = new ClsStudent()
obj.GetStudentInof();

we can write the same code as below by using proto type
var ClsStudent = function()
{
this.StudentName="SaravMani";
}

ClsStudent.prototype.GetStudentInfo= function()
{
return this.studentName;
}


//Second way of creation is makes object creation is faster
//Using the prototype makes for faster object creation, since that function does not have to be re-created each time a new object is created.
//But Advantage of first option is , functin will get access to \
//local variables






createDocumentFragment()
-------------------------
	This Method creates a imaginary Node object, with all the properties
 and methods of the Node object.
If we want to take part of document (Ex: Div panel with multiple child), and manupulate it (remove or add child elements), and want to update back to parnt document, this method will be useful
You can also use the document's Document object to perform these changes, but to prevent destroying the document structure, it can be safer to extract only parts of the document, make the changes, and insert the part back to the document.
Ex:
 	<ul>
<li>Coffeess</li>
<li>Tea</li>
</ul>

<button onclick="myFunction()">Try it</button>

<script>
function myFunction() {
    var d = document.createDocumentFragment();
    d.appendChild(document.getElementsByTagName("LI")[0]);
    d.childNodes[0].childNodes[0].nodeValue = "Milk";
    document.getElementsByTagName("UL")[0].appendChild(d);
}
</script>

Browser is a event processing machines.
Browser will get the events from hardware (ex: click, blur, focus etc.,)
and browser will convert it into a browser events.
Note: Domloaded event will not raised by browser.
Browser works in observer and callback pattern.
Browser is single threaded asynchronous (PER TAB :-))

Steps in browser execution
1. Render HTML
2. Construct DOM
3. Combine DOM and CSS
4. Render DOM
NOte: Rendering agent works in seperate thread and it will modify the page based on
dom manupulation(i.e bcs of this DHTML works :-))

Mainly browser does two things
	1. Parse and Rendering HTML and generating DOM
	2. They Process events


ANgular js extends browser's event loop and parser





window.open("http://www.w3schools.com", "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400");


1.toString() will not work. bcs here 1 is number
var a = 1; a.toString(); will works. bcs 1 is evaluated
(1).toString(); works


How self executed method works.
var ss = (function(){})();
as said in above example (function(){}) if v put anonymus function within () then it will be evaluated

in js everything r objeccts


Javascript primitive datatypes
1. string
2. Number
3. bool
4. null
5. undefined




truthy & falsy
--------------
items which are giving false value is called falsy
falsy 
-------
NaN
false
0
null
""
undefined




arrya extras [Tags -> reactive programming, rxjs, observable]
------------------------------------------------------------------



js->arrayextras


var foo = ["a", "b", "c", "d"];

for (var i = 0, len = foo.length; i < len; i++) {
  console.log(foo[i]);
}
//above code will not readable if we have multiple nested loops


Array extras allow us to replace entire loops with function calls, often improving code readability

["a", "b", "c", "d"].forEach(function(element, index, array) {
  console.log(element);
});

The one drawback is the performance hit that comes from invoking a function for each element in the array. Luckily, this penalty is often negligible. 


map()
-----
The map() function is nearly identical to forEach(). The only difference is that map() returns an array containing the values returned by the callback function.

Ex: var sqrts = [1, 4, 9, 16, 25].map(Math.sqrt);
console.log(sqrts);
// displays "[1, 2, 3, 4, 5]"

filter()
------------
Like forEach() and map(), the filter() method takes a callback function and optional this value. And, like map(), filter() returns an array of values based on the return value of the callback function. The difference is that the filter() callback function should return a Boolean value. If the return value is true, then the array element is added to the results array.


every() and some()
-----------------------
The every() and some() functions also run a callback function on each array element. If every callback function returns true, then every() returns true, otherwise it returns false. Similarly, 
some() returns true if at least one callback function returns true. 


reduce() and reduceRight()
-------------------------------
The reduce() method processes each element in an array, starting from the beginning, and computes a single value. reduce() takes a callback function and an optional initial value as arguments. If the initial value is not present, then the first array element is used.

Ex:var sum = [1, 2, 3, 4, 5].reduce(function(previous, current, index, array) {
  return previous + current;
});
// sum = 15	
reduceRight() method works in the same fashion as reduce(), except that the processing begins at the end of the array and moves towards the beginning.


indexOf() and lastIndexOf()
--------------------------------------
The indexOf() method searches an array for a specific element, and returns the index of the first match. If no match is found, indexOf() returns -1.
A second, optional, argument is used to specify the starting index of the search

Ex:var foo = ["a", "z", "b", "z"];
var first = foo.indexOf("z");
var second = foo.indexOf("z", first + 1);
// first = 1, second = 3

he lastIndexOf() method works exactly the same way, except it starts searching from the end of the array.


[Tags->core js]
A polyfill is a browser fallback, made in JavaScript, that allows functionality you expect to work in modern 
browsers to work in older browsers, e.g., to support canvas (an HTML5 feature) in older browsers.

It's sort of an HTML5 technique, since it is used in conjunction with HTML5, but it's not part of HTML5, and you can have polyfills
 without having HTML5 (for example, to support CSS3 techniques you want).